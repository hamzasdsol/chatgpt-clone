// src/Api.jsx
export const faqData = [
    { "question": "What is React?", "answer": "React is a JavaScript library for building user interfaces." },
    { "question": "What is Tailwind CSS?", "answer": "Tailwind CSS is a utility-first CSS framework for creating custom designs." },
    { "question": "What is Redux?", "answer": "Redux is a library for managing and centralizing application state." },
    { "question": "What is a component in React?", "answer": "A component is a reusable piece of UI that can be composed to build complex user interfaces." },
    { "question": "What is a hook in React?", "answer": "Hooks are functions that let you use state and other React features without writing a class." },
    { "question": "What is JSX?", "answer": "JSX is a syntax extension for JavaScript that looks similar to XML or HTML and is used with React to describe what the UI should look like." },
    { "question": "What is the virtual DOM?", "answer": "The virtual DOM is a lightweight copy of the actual DOM used by React to optimize updates and rendering." },
    { "question": "What is the difference between state and props?", "answer": "State is used to manage data within a component, while props are used to pass data between components." },
    { "question": "What is a class component?", "answer": "A class component is a type of React component defined as a JavaScript class that extends from `React.Component`." },
    { "question": "What is a functional component?", "answer": "A functional component is a simpler way to define a component using a JavaScript function." },
    { "question": "How does React's reconciliation algorithm work?", "answer": "React's reconciliation algorithm compares the current and previous virtual DOM trees to determine the minimal set of changes needed to update the actual DOM." },
    { "question": "What is a controlled component?", "answer": "A controlled component is a form element whose value is controlled by React state." },
    { "question": "What is an uncontrolled component?", "answer": "An uncontrolled component is a form element that maintains its own state internally." },
    { "question": "What is context in React?", "answer": "Context provides a way to pass data through the component tree without having to pass props down manually at every level." },
    { "question": "What are React Fragments?", "answer": "Fragments let you group multiple elements without adding extra nodes to the DOM." },
    { "question": "What is React Router?", "answer": "React Router is a library for handling routing in React applications, allowing navigation between different components or pages." },
    { "question": "What is server-side rendering (SSR)?", "answer": "Server-side rendering is the process of rendering a React component to HTML on the server and sending it to the client." },
    { "question": "What is static site generation (SSG)?", "answer": "Static site generation is the process of generating HTML pages at build time, which can be served as static files." },
    { "question": "What is client-side rendering (CSR)?", "answer": "Client-side rendering is the process of rendering a React component to HTML on the client side, typically after the initial page load." },
    { "question": "What is the use of `useEffect` hook?", "answer": "`useEffect` is a hook that allows you to perform side effects in functional components, such as fetching data or subscribing to events." },
    { "question": "What is `useState` hook?", "answer": "`useState` is a hook that lets you add state to functional components." },
    { "question": "What is `useReducer` hook?", "answer": "`useReducer` is a hook that lets you manage complex state logic using a reducer function." },
    { "question": "What is `useContext` hook?", "answer": "`useContext` is a hook that lets you access context values in functional components." },
    { "question": "What is `useMemo` hook?", "answer": "`useMemo` is a hook that memoizes the result of a computation to optimize performance." },
    { "question": "What is `useCallback` hook?", "answer": "`useCallback` is a hook that returns a memoized version of a callback function." },
    { "question": "What is the `key` prop used for in React lists?", "answer": "The `key` prop is used to uniquely identify elements in a list, helping React efficiently update the list when items change." },
    { "question": "What is a higher-order component (HOC)?", "answer": "A higher-order component is a function that takes a component and returns a new component with additional props or functionality." },
    { "question": "What are React portals?", "answer": "Portals provide a way to render children into a different part of the DOM outside of the parent component's hierarchy." },
    { "question": "What is the purpose of `React.StrictMode`?", "answer": "`React.StrictMode` is a tool for highlighting potential problems in an application by running checks and warnings in development mode." },
    { "question": "What is PropTypes?", "answer": "PropTypes is a library for type-checking the props of a React component to ensure they receive the correct type of data." },
    { "question": "What is the `dangerouslySetInnerHTML` attribute used for?", "answer": "`dangerouslySetInnerHTML` is used to set HTML content directly in a React component, but it should be used with caution to avoid XSS attacks." },
    { "question": "How do you handle form submission in React?", "answer": "You can handle form submission in React by defining an `onSubmit` event handler for the form and using controlled components to manage form state." },
    { "question": "What is a custom hook in React?", "answer": "A custom hook is a JavaScript function that uses built-in React hooks to encapsulate and reuse stateful logic across components." },
    { "question": "What is the purpose of `ReactDOM.render`?", "answer": "`ReactDOM.render` is used to render a React component tree into a DOM element in the web page." },
    { "question": "What is the purpose of `ReactDOM.hydrate`?", "answer": "`ReactDOM.hydrate` is used to attach event handlers to a server-rendered HTML markup, enabling interactive client-side behavior." },
    { "question": "What are React's lifecycle methods?", "answer": "Lifecycle methods are methods that are called at specific points in a component's lifecycle, such as mounting, updating, and unmounting." },
    { "question": "What is `componentDidMount` used for?", "answer": "`componentDidMount` is a lifecycle method called after a component has been rendered to the DOM, often used for fetching data." },
    { "question": "What is `componentDidUpdate` used for?", "answer": "`componentDidUpdate` is a lifecycle method called after a component has updated, useful for performing operations in response to changes in props or state." },
    { "question": "What is `componentWillUnmount` used for?", "answer": "`componentWillUnmount` is a lifecycle method called before a component is removed from the DOM, useful for cleanup tasks." },
    { "question": "What is `React.StrictMode` used for?", "answer": "`React.StrictMode` is a tool for highlighting potential problems in an application by running checks and warnings in development mode." },
    { "question": "What is a React error boundary?", "answer": "An error boundary is a component that catches JavaScript errors in its child components, logs them, and displays a fallback UI instead of crashing the entire component tree." },
    { "question": "What is `React.lazy` used for?", "answer": "`React.lazy` is used for code-splitting, allowing you to dynamically import components only when they are needed." },
    { "question": "What is `Suspense` in React?", "answer": "`Suspense` is a component used to wrap lazy-loaded components, showing a fallback UI while the component is being loaded." },
    { "question": "What is the `useTransition` hook?", "answer": "`useTransition` is a hook that allows you to manage the transitions of state updates, helping to keep the UI responsive." },
    { "question": "What is the `useDeferredValue` hook?", "answer": "`useDeferredValue` is a hook that defers updates to a value until the browser is idle, improving performance for complex state updates." },
    { "question": "What are React Suspense boundaries?", "answer": "Suspense boundaries are used to manage loading states for components that are being dynamically imported or fetching data." },
    { "question": "What is React's `createContext` used for?", "answer": "`createContext` is used to create a Context object that can be used to provide and consume values throughout the component tree." },
    { "question": "What is the `useReducer` hook used for?", "answer": "`useReducer` is used for managing complex state logic in a functional component, similar to Redux but built-in to React." },
    { "question": "What is the difference between `useMemo` and `useCallback`?", "answer": "`useMemo` memoizes the result of a computation, while `useCallback` memoizes a function reference to prevent unnecessary re-renders." },
    { "question": "What is a lazy-loaded component?", "answer": "A lazy-loaded component is a component that is loaded asynchronously, reducing the initial bundle size and improving performance." },
    { "question": "What is the `ReactDOMServer` package used for?", "answer": "`ReactDOMServer` provides methods for rendering React components to static HTML on the server side." },
    { "question": "What is the `useImperativeHandle` hook?", "answer": "`useImperativeHandle` is a hook that customizes the instance value exposed when using `ref` in a functional component." },
    { "question": "What are React's built-in hooks?", "answer": "React's built-in hooks include `useState`, `useEffect`, `useContext`, `useReducer`, `useCallback`, `useMemo`, `useRef`, and `useImperativeHandle`." },
    { "question": "What is `React.memo`?", "answer": "`React.memo` is a higher-order component that memoizes a component to prevent unnecessary re-renders when its props haven't changed." },
    { "question": "What is the purpose of the `useRef` hook?", "answer": "`useRef` is a hook that provides a mutable object whose `.current` property can be used to store a reference to a DOM element or a value." },
    { "question": "What is the `useLayoutEffect` hook?", "answer": "`useLayoutEffect` is similar to `useEffect`, but it fires synchronously after all DOM mutations, allowing you to perform layout measurements." },
    { "question": "What is the `React.StrictMode` tool?", "answer": "`React.StrictMode` is a development mode tool that helps identify potential problems in an application by enabling additional checks and warnings." },
    { "question": "What is a dynamic import?", "answer": "A dynamic import is a syntax for importing modules asynchronously, allowing you to split your code into smaller chunks." },
    { "question": "What is a context provider in React?", "answer": "A context provider is a component that provides values to its descendants through React Context." },
    { "question": "What is a context consumer in React?", "answer": "A context consumer is a component that consumes values provided by a context provider." },
    { "question": "What is a higher-order function?", "answer": "A higher-order function is a function that takes one or more functions as arguments or returns a function as its result." },
    { "question": "What is a render prop?", "answer": "A render prop is a technique for sharing code between React components using a function that returns a React element." },
    { "question": "What is the purpose of `React.PureComponent`?", "answer": "`React.PureComponent` is a base class that implements a shallow comparison of props and state to optimize rendering performance." },
    { "question": "What is a controlled input?", "answer": "A controlled input is an input element whose value is controlled by React state." },
    { "question": "What is an uncontrolled input?", "answer": "An uncontrolled input is an input element that maintains its own state internally." },
    { "question": "What is a React ref?", "answer": "A ref is a way to get a reference to a DOM element or a React component instance, allowing you to directly interact with it." },
    { "question": "What is a higher-order component (HOC)?", "answer": "A higher-order component is a function that takes a component and returns a new component with additional props or behavior." },
    { "question": "What is a React hook?", "answer": "A React hook is a special function that lets you use React features like state and lifecycle methods in functional components." },
    { "question": "What is the `ReactDOM.createPortal` method?", "answer": "`ReactDOM.createPortal` is used to render children into a different part of the DOM outside of their parent component's hierarchy." },
    { "question": "What is `React.StrictMode` used for?", "answer": "`React.StrictMode` is a development tool for detecting potential problems in an application by running checks and warnings." },
    { "question": "What is `React.Suspense`?", "answer": "`React.Suspense` is a component that lets you wait for some code to load before rendering a component." },
    { "question": "What is `useDeferredValue` used for?", "answer": "`useDeferredValue` is a hook that defers updates to a value until the browser is idle, helping to improve performance for complex state updates." },
    { "question": "What is `useTransition` used for?", "answer": "`useTransition` is a hook that allows you to manage the transition of state updates, keeping the UI responsive during large updates." },
    { "question": "What is `React.lazy` used for?", "answer": "`React.lazy` is used for dynamic imports, allowing components to be loaded lazily and only when they are needed." },
    { "question": "What is the purpose of `useImperativeHandle`?", "answer": "`useImperativeHandle` is used to customize the instance value exposed when using `ref` with functional components." },
    { "question": "What is a fallback UI in React?", "answer": "A fallback UI is a placeholder component that is displayed while a component is being lazily loaded or data is being fetched." },
    { "question": "What are React fragments?", "answer": "React fragments are used to group a list of children without adding extra nodes to the DOM." },
    { "question": "What is `React.forwardRef`?", "answer": "`React.forwardRef` is a higher-order component that allows you to forward refs to child components." },
    { "question": "What is `React.memo`?", "answer": "`React.memo` is a higher-order component that memoizes a component to prevent unnecessary re-renders when its props haven't changed." },
    { "question": "What are controlled and uncontrolled components?", "answer": "Controlled components are form elements whose value is controlled by React state, while uncontrolled components maintain their own internal state." },
    { "question": "What is `useCallback`?", "answer": "`useCallback` is a hook that returns a memoized version of a callback function, preventing unnecessary re-renders." },
    { "question": "What is `useMemo`?", "answer": "`useMemo` is a hook that memoizes the result of a computation, improving performance by preventing recalculation on every render." },
    { "question": "What is a React state?", "answer": "State is an object that holds the dynamic data of a component and can be updated over time, triggering a re-render." },
    { "question": "What is the purpose of `useEffect`?", "answer": "`useEffect` is a hook that allows you to perform side effects in functional components, such as data fetching or subscribing to events." },
    { "question": "What is the `useContext` hook?", "answer": "`useContext` is a hook that allows you to access context values in functional components." },
    { "question": "What is `useRef`?", "answer": "`useRef` is a hook that provides a mutable ref object which persists across renders, useful for accessing DOM elements or storing values." },
    { "question": "What is a React component's lifecycle?", "answer": "A component's lifecycle refers to the series of methods called at different stages of a component's existence, including mounting, updating, and unmounting." },
    { "question": "What is the `render` method in React?", "answer": "The `render` method is used to define what the UI should look like for a class component and returns a React element." },
    { "question": "What is `ReactDOM.render` used for?", "answer": "`ReactDOM.render` is used to render a React component tree into a DOM element in the web page." },
    { "question": "What is `ReactDOM.hydrate` used for?", "answer": "`ReactDOM.hydrate` is used to attach event handlers to server-rendered HTML, enabling client-side interactivity." },
    { "question": "What is `React.PureComponent`?", "answer": "`React.PureComponent` is a base class that implements a shallow comparison of props and state to optimize rendering performance." },
    { "question": "What is `React.Fragment`?", "answer": "`React.Fragment` is used to group multiple elements without adding extra nodes to the DOM." },
    { "question": "What is `React.StrictMode`?", "answer": "`React.StrictMode` is a development tool that helps identify potential problems in an application by running additional checks and warnings." },
    { "question": "What is `React.Suspense`?", "answer": "`React.Suspense` is used to handle lazy-loading components and display a fallback UI while components are being loaded." },
    { "question": "What is a higher-order component (HOC)?", "answer": "A higher-order component is a function that takes a component and returns a new component with additional props or behavior." },
    { "question": "What is `useTransition`?", "answer": "`useTransition` is a hook that helps manage state transitions and keeps the UI responsive during complex state updates." },
    { "question": "What is `useDeferredValue`?", "answer": "`useDeferredValue` is a hook that defers updates to a value until the browser is idle, improving performance for state updates." },
    { "question": "What is `React.createContext` used for?", "answer": "`React.createContext` is used to create a Context object that provides and consumes values throughout the component tree." },
    { "question": "What is a React Portal?", "answer": "A React Portal is a way to render children into a different part of the DOM outside of the parent component's hierarchy." },
    { "question": "What is `React.memo`?", "answer": "`React.memo` is a higher-order component that memoizes a component to prevent unnecessary re-renders when its props haven't changed." },
    { "question": "What is `useMemo`?", "answer": "`useMemo` is a hook that memoizes the result of a computation, improving performance by preventing recalculation on every render." },
    { "question": "What is `useCallback`?", "answer": "`useCallback` is a hook that returns a memoized version of a callback function, preventing unnecessary re-renders." },
    { "question": "What is `useEffect`?", "answer": "`useEffect` is a hook that allows you to perform side effects in functional components, such as fetching data or subscribing to events." },
    { "question": "What is the purpose of `useState`?", "answer": "`useState` is a hook that lets you add state to functional components, allowing you to manage and update component data." },
    { "question": "What are the advantages of using React?", "answer": "React provides a component-based architecture, virtual DOM for efficient updates, reusable components, and a strong community with many libraries and tools." },
    { "question": "What is the purpose of `useReducer`?", "answer": "`useReducer` is a hook used for managing complex state logic with a reducer function, similar to Redux but built-in to React." },
    { "question": "What is the purpose of `useLayoutEffect`?", "answer": "`useLayoutEffect` is a hook that runs synchronously after all DOM mutations, allowing you to perform layout measurements or mutations." },
    { "question": "What is `React.forwardRef` used for?", "answer": "`React.forwardRef` is a higher-order component that allows you to forward refs to child components." },
    { "question": "What is the purpose of `ReactDOM.createPortal`?", "answer": "`ReactDOM.createPortal` is used to render children into a different part of the DOM, outside of their parent component's hierarchy." },
    { "question": "What is the difference between `useMemo` and `useCallback`?", "answer": "`useMemo` memoizes the result of a computation, while `useCallback` memoizes a function reference to avoid unnecessary re-renders." },
    { "question": "What are React's lifecycle methods?", "answer": "Lifecycle methods are hooks that allow you to run code at specific points in a component's lifecycle, such as mounting, updating, and unmounting." },
    { "question": "What is the purpose of `React.StrictMode`?", "answer": "`React.StrictMode` is a development tool for identifying potential problems in an application by running additional checks and warnings." },
    { "question": "What is `React.Suspense` used for?", "answer": "`React.Suspense` is used to handle lazy-loading components and display a fallback UI while components are being loaded." },
    { "question": "What is `React.lazy`?", "answer": "`React.lazy` is used for code-splitting by dynamically importing components only when they are needed." },
    { "question": "What is the `useImperativeHandle` hook?", "answer": "`useImperativeHandle` is a hook that customizes the instance value exposed when using `ref` in functional components." },
    { "question": "What is a context provider?", "answer": "A context provider is a component that provides context values to its descendants using the Context API." },
    { "question": "What is a context consumer?", "answer": "A context consumer is a component that consumes context values provided by a context provider using the Context API." },
    { "question": "What is the difference between controlled and uncontrolled components?", "answer": "Controlled components' values are managed by React state, while uncontrolled components maintain their own internal state." },
    { "question": "What is the `useRef` hook used for?", "answer": "`useRef` is a hook that provides a mutable ref object which persists across renders and can be used to access DOM elements or store values." },
    { "question": "What is a higher-order component (HOC)?", "answer": "A higher-order component is a function that takes a component and returns a new component with additional props or behavior." },
    { "question": "What is `React.createContext` used for?", "answer": "`React.createContext` is used to create a Context object that allows for sharing values across components without prop drilling." },
    { "question": "What are React fragments used for?", "answer": "React fragments are used to group a list of children without adding extra nodes to the DOM." },
    { "question": "What is the purpose of `ReactDOM.hydrate`?", "answer": "`ReactDOM.hydrate` is used to attach event handlers to server-rendered HTML, enabling client-side interactivity." },
    { "question": "What is `React.memo` used for?", "answer": "`React.memo` is used to prevent unnecessary re-renders by memoizing a component and only re-rendering it when its props change." },
    { "question": "What is `useEffect` used for?", "answer": "`useEffect` is used to perform side effects in functional components, such as data fetching, subscriptions, or manual DOM manipulations." },
    { "question": "What is `useContext` used for?", "answer": "`useContext` is used to access context values within functional components." },
    { "question": "What is `useCallback` used for?", "answer": "`useCallback` is used to memoize callback functions, preventing unnecessary re-renders by returning the same function instance if dependencies haven't changed." },
    { "question": "What is `useMemo` used for?", "answer": "`useMemo` is used to memoize expensive calculations, preventing unnecessary recalculations on every render." }
  ];
  
